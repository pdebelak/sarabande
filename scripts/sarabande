#! /usr/bin/env python3

import os
import argparse


os.environ['FLASK_ENV'] = os.getenv('FLASK_ENV', 'production')


def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', dest='config_file',
                        help='path to config file', required=True)
    commands = parser.add_subparsers(title='commands', dest='command')

    commands.required = True
    server = commands.add_parser('server', help='run sarabande server')
    server.add_argument('--port', dest='port', help='port to run server on',
                        default='5000')
    server.add_argument('--processes', dest='processes',
                        help='number of python processes to run',
                        default='2')
    server.add_argument('--threads', dest='threads',
                        help='number of threads to run', default='2')

    create_admin = commands.add_parser('create_admin',
                                       help='create sarabande admin')
    create_admin.add_argument('--username', dest='username',
                              help='username for admin', required=True)
    create_admin.add_argument('--password', dest='password',
                              help='password for admin', required=True)

    commands.add_parser('update_db', help='update sarabande database')

    return parser


def execute_command(args):
    if args.command == 'server':
        return _run_server(args)
    if args.command == 'create_admin':
        return _create_admin(args)
    if args.command == 'update_db':
        return _update_db(args)


def _run_server(args):
    from subprocess import check_call
    command = [
        'uwsgi',
        '--http :{0}'.format(args.port),
        '--threads {0}'.format(args.threads),
        '--processes {0}'.format(args.processes),
        '--manage-script-name',
        '--mount /=sarabande:app',
    ]
    return check_call(' '.join(command), shell=True)


def _create_admin(args):
    from sarabande import db
    from sarabande.models import User
    user = User(username=args.username,
                password=args.password,
                user_type='admin')
    db.session.add(user)
    db.session.commit()
    return 0


def _update_db(_args):
    import os
    os.environ['FLASK_APP'] = 'sarabande'
    from flask_migrate import upgrade
    from sarabande import app
    with app.app_context():
        upgrade()


if __name__ == '__main__':
    parser = create_parser()
    args = parser.parse_args()
    os.environ['SARABANDE_CONFIG'] = args.config_file
    raise SystemExit(execute_command(args))
